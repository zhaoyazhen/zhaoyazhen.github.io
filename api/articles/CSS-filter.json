{"title":"CSS中filter属性的使用详解","uid":"05578dbc946a53c7742b35135ebdeca1","slug":"CSS-filter","date":"2025-08-21T10:38:40.000Z","updated":"2025-08-25T04:30:47.657Z","comments":true,"path":"api/articles/CSS-filter.json","keywords":"React、Vue、Uniapp、Nodejs、性能与优化","cover":"./../images/cover.png","content":"<p>前一段时间，小编突然接到了一个紧急需求，将公司的线上小程序置为灰色主题，然而项目中没有定义基础颜色变量，且小程序页面有五六十个，额。。。，头疼的不是一点点，后面发现了 filter 这个属性，一下子解了我的燃眉之急，遂对于这个神奇的属性进行了一波详细的学习。</p>\n<h5 id=\"一、filter-属性简介\"><a href=\"#一、filter-属性简介\" class=\"headerlink\" title=\"一、filter 属性简介\"></a>一、filter 属性简介</h5><p>filter 用于给元素（通常是图片、背景、文字甚至整个容器）应用图像处理效果，如模糊、灰度、对比度等。语法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: none | &lt;filter-function&gt; [&lt;filter-function&gt; ...];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>none：无滤镜效果（默认值）。</li>\n<li>&lt;filter-function&gt;：一个或多个滤镜函数，可以叠加。</li>\n</ul>\n<h5 id=\"二、常用滤镜函数\"><a href=\"#二、常用滤镜函数\" class=\"headerlink\" title=\"二、常用滤镜函数\"></a>二、常用滤镜函数</h5><p><strong>1、blur() 模糊</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 值越大，模糊程度越高(常用于背景虚化（毛玻璃效果需配合 backdrop-filter）)</span><br><span class=\"line\">filter: blur(5px);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、brightness() 亮度</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 100% → 原始亮度；&gt;100% → 变亮；&lt;100% → 变暗；0 → 全黑；</span><br><span class=\"line\">filter: brightness(150%);</span><br></pre></td></tr></table></figure>\n<p><strong>3、contrast() 对比度</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 100% → 原始对比度；&gt;100% → 提高对比度；&lt;100% → 降低对比度，趋向灰色</span><br><span class=\"line\">filter: contrast(200%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、grayscale() 灰度</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 常用于图片灰化/禁用状态（100% → 全灰度（黑白效果）；0% → 原始颜色；）</span><br><span class=\"line\">filter: grayscale(100%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、invert() 反色</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 常用于暗色模式适配 (100% → 完全反色；50% → 半反色（类似负片效果）；)</span><br><span class=\"line\">filter: invert(100%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、opacity() 透明度</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 与 opacity 属性不同，filter: opacity() 不会影响子元素事件（1 或 100% → 完全不透明；0 → 完全透明；）</span><br><span class=\"line\">filter: opacity(50%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>7、saturate() 饱和度</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 100% → 原始饱和度；&gt;100% → 增强饱和度；0% → 去色（灰色）；</span><br><span class=\"line\">filter: saturate(200%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、sepia() 怀旧色（褐色调）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 常用于复古照片效果（100% → 完全褐色效果；）</span><br><span class=\"line\">filter: sepia(100%);</span><br></pre></td></tr></table></figure>\n\n<p><strong>9、hue-rotate() 色相旋转</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过旋转色轮改变颜色，用于动态色彩切换（0deg → 原始颜色；）</span><br><span class=\"line\">filter: hue-rotate(90deg);</span><br></pre></td></tr></table></figure>\n\n<p><strong>10、drop-shadow() 阴影</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 与 box-shadow 类似，但可应用于透明 PNG / SVG</span><br><span class=\"line\">filter: drop-shadow(5px 5px 10px rgba(0,0,0,0.5)); // 语法：drop-shadow(offset-x offset-y blur-radius color)</span><br></pre></td></tr></table></figure>\n\n<p><strong>11、多个滤镜叠加</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 执行顺序从左到右，先灰度 → 再模糊 → 再调亮</span><br><span class=\"line\">filter: grayscale(100%) blur(2px) brightness(120%);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三、backdrop-filter（背景滤镜）\"><a href=\"#三、backdrop-filter（背景滤镜）\" class=\"headerlink\" title=\"三、backdrop-filter（背景滤镜）\"></a>三、backdrop-filter（背景滤镜）</h5><p>  不同于 filter 作用于元素自身，backdrop-filter 用于 处理元素背后的内容。eg: 毛玻璃效果</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要父元素有半透明背景才有效，且部分浏览器需加 -webkit- 前缀</span><br><span class=\"line\"><span class=\"selector-class\">.glass</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 半透明背景 + 背景模糊 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">backdrop-filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">12px</span>) <span class=\"built_in\">brightness</span>(<span class=\"number\">110%</span>);</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">backdrop-filter</span>: <span class=\"built_in\">blur</span>(<span class=\"number\">12px</span>) <span class=\"built_in\">brightness</span>(<span class=\"number\">110%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>tips1：滤镜会触发 GPU 加速，但在大面积模糊或动画时性能消耗大，谨慎使用。</li>\n<li>tips2：backdrop-filter 支持度不如 filter，需检查兼容性。<ul>\n<li>filter：主流浏览器（Chrome、Firefox、Safari、Edge）都支持。</li>\n<li>backdrop-filter：Safari 先支持，Chrome&#x2F;Edge 需新版本，Firefox 需手动开启实验功能。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h5><p><strong>1、小程序设置灰色页面</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>存在问题：给page标签使用灰色滤镜后导致’position: fixed’位置错乱，无法正确定位，样式错乱。</p>\n<p>问题原因：当 filter 不为 none 的时候，如果该元素或者其子元素具有 absolute 或 fixed 属性，那么它会为其创建一个新的包含块&#x2F;容器，会造成该 absolute 或 fixed 元素的定位发生变化（就是改变了 absolute 或 fixed 元素的定位 父 元素，变成新创建的元素）。</p>\n<p>解决方案：不对page view标签设置滤镜filter，只对 text button image video等具体标签设置滤镜，eg: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">text</span>, <span class=\"selector-tag\">span</span>, <span class=\"selector-tag\">video</span>, <span class=\"selector-tag\">image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>tips: 最好逐个元素排查，确保设置了 filter 的元素，不包含存在 fixed 定位的子元素。</p>\n<p><strong>2、普通网站设置灰色页面</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips1: 将filter 设置在根元素上，它是不会为 absolute 或 fixed 子元素创建新的包含块的，因此我们可以通过将filter设置在根元素（html）上来避免定位问题。若在 body 标签中使用了 filter 属性后（body { filter: grayscale(100%); ）， filter 就会生成一个新的包含块，其位置大小和 body 一样，然后 fixed 元素就会根据这个包含块进行定位，导致定位出现问题，原因同上。</p>\n<p>tips2: 配置了 css filter 属性的元素，z-index 会被提升，处于同一层级时可能会覆盖掉其他有定位元素，需要注意调整 z-index 层级。</p>\n<p><strong>3、拓展内容：实现追悼日网站自动变成灰色</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在项目入口文件App.vue中进行以下设置</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getMournDate</span>()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getMournDate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用接口获取后台设置的追悼日期范围（起始日~截止日）</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">mournDate</span> =  &#123;</span><br><span class=\"line\">        <span class=\"attr\">start</span>: <span class=\"number\">1669824000000</span>, <span class=\"comment\">// 2022-12-01</span></span><br><span class=\"line\">        <span class=\"attr\">end</span>: <span class=\"number\">1670601600000</span> <span class=\"comment\">// 2022-12-10</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkMourn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">mournDate</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">checkMourn</span>(<span class=\"params\">mournDate</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"title class_\">Data</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mournDate.<span class=\"property\">start</span> &lt;= now &amp;&amp; now &lt;= mournDate.<span class=\"property\">end</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 追悼日只有设置在html元素上才不会影响fixed和absolute定位</span></span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">style</span>.<span class=\"property\">filter</span> = <span class=\"string\">&#x27;grayscale(100%)&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 自动取消黑白</span></span><br><span class=\"line\">          <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">style</span>.<span class=\"property\">filter</span> = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">        &#125;, mournDate.<span class=\"property\">end</span> - now)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">style</span>.<span class=\"property\">filter</span> = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now &lt; mournDate.<span class=\"property\">start</span>) &#123; <span class=\"comment\">// 自动变为黑白</span></span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">style</span>.<span class=\"property\">filter</span> = <span class=\"string\">&#x27;grayscale(100%)&#x27;</span></span><br><span class=\"line\">          &#125;, mournDate.<span class=\"property\">start</span> - now)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、其他网友问题（小编未遇到该问题）</strong></p>\n<p>  问题1: filter导致css无效</p>\n<p>  问题定位：首先要确定是由filter引起的css无效，浏览器中按F12打开开发者工具，然后如果在console中出现这样一行警告：‘Resource interpreted as Stylesheet but transferred with MIME type text&#x2F;html: ’，那大概就是因为filter的问题导致的。</p>\n<p>  解决方案：把filter中涉及response.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);的地方替换成这样：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 前面需要 import javax.servlet.http.HttpServletRequest;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\"> <span class=\"comment\">// place your code here</span></span><br><span class=\"line\">   <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">req</span> <span class=\"operator\">=</span> (HttpServletRequest) request;</span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">requestURI</span> <span class=\"operator\">=</span> req.getRequestURI();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (requestURI.contains(<span class=\"string\">&quot;.css&quot;</span>) || requestURI.contains(<span class=\"string\">&quot;.js&quot;</span>)) &#123;</span><br><span class=\"line\">     request.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">     response.setCharacterEncoding(<span class=\"string\">&quot;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">     chain.doFilter(request, response);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     request.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">     response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);<span class=\"comment\">//这样会把CSS文件和JS文件转化为html文件,但是在if中排除了</span></span><br><span class=\"line\">     chain.doFilter(request, response);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<a href=\"https://blog.csdn.net/weixin_44919664/article/details/109410235\">「丸子家的银河龙」</a></p>\n","feature":true,"text":"前一段时间，小编突然接到了一个紧急需求，将公司的线上小程序置为灰色主题，然而项目中没有定义基础颜色变量，且小程序页面有五六十个，额。。。，头疼的不是一点点，后面...","permalink":"/post/CSS-filter","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"CSS","slug":"CSS","count":2,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":2,"path":"api/tags/CSS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81filter-%E5%B1%9E%E6%80%A7%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">一、filter 属性简介</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%B8%B8%E7%94%A8%E6%BB%A4%E9%95%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">二、常用滤镜函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81backdrop-filter%EF%BC%88%E8%83%8C%E6%99%AF%E6%BB%A4%E9%95%9C%EF%BC%89\"><span class=\"toc-text\">三、backdrop-filter（背景滤镜）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">四、使用场景</span></a></li></ol>","author":{"name":"YaZhen","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"喜欢深耕知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"CSS实现三角形的多种方式","uid":"785e956e66b583943c71b60dbc7dba1a","slug":"CSS-triangle","date":"2025-08-20T12:47:22.000Z","updated":"2025-08-21T10:16:51.416Z","comments":true,"path":"api/articles/CSS-triangle.json","keywords":"React、Vue、Uniapp、Nodejs、性能与优化","cover":"./../images/cover.png","text":"日常开发中，我们经常会遇到需要前端手动绘制三角形的场景（比如：后台管理系统开发没有设计稿或者需求紧急等等，懂得都懂），故小编对以往的实现方式进行了总结，以便后续...","permalink":"/post/CSS-triangle","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"CSS","slug":"CSS","count":2,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":2,"path":"api/tags/CSS.json"}],"author":{"name":"YaZhen","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"喜欢深耕知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}